#!/usr/bin/env python3
"""Integration tests for Kirin Web UI - automated testing without manual clicking."""

import tempfile
from pathlib import Path
from fastapi.testclient import TestClient
import pytest

from kirin.web.app import app
from kirin.web.config import CatalogManager


@pytest.fixture
def client():
    """Create a test client for the FastAPI app."""
    return TestClient(app)


@pytest.fixture
def temp_catalog():
    """Create a temporary catalog for testing."""
    with tempfile.TemporaryDirectory() as temp_dir:
        catalog_dir = Path(temp_dir) / "kirin-data"
        catalog_dir.mkdir(parents=True, exist_ok=True)  # Create the directory first
        # Use unique names based on temp directory to avoid conflicts
        unique_name = f"Test Catalog {temp_dir.split('/')[-1]}"
        catalog_config = {
            "name": unique_name,
            "root_dir": str(catalog_dir),
        }
        yield catalog_config


def test_catalog_listing_page(client):
    """Test that the catalog listing page loads correctly."""
    response = client.get("/")
    assert response.status_code == 200
    assert "Data Catalogs" in response.text
    assert "Add Catalog" in response.text


def test_add_catalog_form(client):
    """Test that the add catalog form loads correctly."""
    response = client.get("/catalogs/add")
    assert response.status_code == 200
    assert "Add Data Catalog" in response.text
    assert "Catalog Name" in response.text
    assert "Root Directory" in response.text


def test_create_catalog_and_dataset_workflow(client, temp_catalog):
    """Test the complete workflow: create catalog -> create dataset -> commit files."""
    # Step 1: Create catalog
    response = client.post("/catalogs/add", data=temp_catalog)
    assert response.status_code == 200
    assert temp_catalog["name"] in response.text

    # Get the catalog ID from the response (it's generated by slugify)
    from slugify import slugify

    catalog_id = slugify(temp_catalog["name"])

    # Step 2: Navigate to catalog datasets page
    response = client.get(f"/catalog/{catalog_id}")
    assert response.status_code == 200
    assert temp_catalog["name"] in response.text
    assert "Create Dataset" in response.text

    # Step 3: Create a dataset
    dataset_data = {
        "name": "test-dataset",
        "description": "A test dataset for integration testing",
    }
    response = client.post(f"/catalog/{catalog_id}/datasets/create", data=dataset_data)
    assert response.status_code == 200
    assert "test-dataset" in response.text
    assert "created successfully" in response.text

    # Step 4: Navigate to dataset view
    response = client.get(f"/catalog/{catalog_id}/test-dataset")
    assert response.status_code == 200
    assert "test-dataset" in response.text
    assert "No files in this commit" in response.text  # Empty dataset

    # Step 5: Test commit form loads
    response = client.get(f"/catalog/{catalog_id}/test-dataset/commit")
    assert response.status_code == 200
    assert "Create New Commit" in response.text
    assert "Upload Files" in response.text


def test_catalog_with_cloud_urls(client):
    """Test that catalogs work with cloud URLs."""
    cloud_catalogs = [
        {
            "name": "GCS Test Catalog",
            "root_dir": "gs://test-bucket/kirin-data",
        },
        {
            "name": "S3 Test Catalog",
            "root_dir": "s3://test-bucket/kirin-data",
        },
        {
            "name": "Azure Test Catalog",
            "root_dir": "az://test-container/kirin-data",
        },
    ]

    for catalog_data in cloud_catalogs:
        response = client.post("/catalogs/add", data=catalog_data)
        assert response.status_code == 200
        assert catalog_data["name"] in response.text
        assert catalog_data["root_dir"] in response.text


def test_catalog_edit_workflow(client, temp_catalog):
    """Test catalog editing workflow."""
    # Create catalog
    response = client.post("/catalogs/add", data=temp_catalog)
    assert response.status_code == 200

    # Get the catalog ID from the response (it's generated by slugify)
    from slugify import slugify

    catalog_id = slugify(temp_catalog["name"])

    # Edit catalog
    updated_data = {
        "name": "Updated Test Catalog",
        "root_dir": temp_catalog["root_dir"],
    }
    response = client.post(f"/catalog/{catalog_id}/edit", data=updated_data)
    assert response.status_code == 200
    assert "Updated Test Catalog" in response.text
    assert "updated successfully" in response.text


def test_catalog_delete_workflow(client, temp_catalog):
    """Test catalog deletion workflow."""
    # Create catalog
    response = client.post("/catalogs/add", data=temp_catalog)
    assert response.status_code == 200

    # Get the catalog ID from the response (it's generated by slugify)
    from slugify import slugify

    catalog_id = slugify(temp_catalog["name"])

    # Delete catalog
    response = client.post(f"/catalog/{catalog_id}/delete")
    assert response.status_code == 200
    assert "deleted successfully" in response.text
    # The catalog name appears in the success message, but should not appear in the catalog list
    assert (
        "No data catalogs configured" in response.text
        or catalog_id not in response.text
    )


def test_dataset_files_tab(client, temp_catalog):
    """Test that dataset files tab loads correctly."""
    # Create catalog and dataset
    response = client.post("/catalogs/add", data=temp_catalog)
    assert response.status_code == 200

    # Get the catalog ID from the response (it's generated by slugify)
    from slugify import slugify

    catalog_id = slugify(temp_catalog["name"])

    dataset_data = {"name": "test-dataset", "description": "Test dataset"}
    response = client.post(f"/catalog/{catalog_id}/datasets/create", data=dataset_data)
    assert response.status_code == 200

    # Test files tab
    response = client.get(f"/catalog/{catalog_id}/test-dataset/files")
    assert response.status_code == 200
    assert "No files in this commit" in response.text


def test_dataset_history_tab(client, temp_catalog):
    """Test that dataset history tab loads correctly."""
    # Create catalog and dataset
    response = client.post("/catalogs/add", data=temp_catalog)
    assert response.status_code == 200

    # Get the catalog ID from the response (it's generated by slugify)
    from slugify import slugify

    catalog_id = slugify(temp_catalog["name"])

    dataset_data = {"name": "test-dataset", "description": "Test dataset"}
    response = client.post(f"/catalog/{catalog_id}/datasets/create", data=dataset_data)
    assert response.status_code == 200

    # Test history tab
    response = client.get(f"/catalog/{catalog_id}/test-dataset/history")
    assert response.status_code == 200
    # Should show empty history for new dataset


def test_dataset_commit_form(client, temp_catalog):
    """Test that dataset commit form loads correctly."""
    # Create catalog and dataset
    response = client.post("/catalogs/add", data=temp_catalog)
    assert response.status_code == 200

    # Get the catalog ID from the response (it's generated by slugify)
    from slugify import slugify

    catalog_id = slugify(temp_catalog["name"])

    dataset_data = {"name": "test-dataset", "description": "Test dataset"}
    response = client.post(f"/catalog/{catalog_id}/datasets/create", data=dataset_data)
    assert response.status_code == 200

    # Test commit form
    response = client.get(f"/catalog/{catalog_id}/test-dataset/commit")
    assert response.status_code == 200
    assert "Create New Commit" in response.text
    assert "Upload Files" in response.text
    assert "Commit Message" in response.text


def test_catalog_help_examples(client):
    """Test that catalog help examples are shown correctly."""
    response = client.get("/catalogs/add")
    assert response.status_code == 200

    # Check that help examples are present
    assert "Examples:" in response.text
    assert "Local:" in response.text
    assert "Google Cloud:" in response.text
    assert "Amazon S3:" in response.text
    assert "Azure:" in response.text
    assert "gs://" in response.text
    assert "s3://" in response.text
    assert "az://" in response.text


def test_catalog_validation_errors(client):
    """Test that catalog validation shows appropriate errors."""
    # Test missing required fields
    response = client.post("/catalogs/add", data={})
    assert response.status_code == 422  # Validation error

    # Test empty name
    response = client.post(
        "/catalogs/add", data={"name": "", "root_dir": "/path/to/data"}
    )
    assert response.status_code == 422  # Validation error

    # Test empty root_dir
    response = client.post(
        "/catalogs/add", data={"name": "Test Catalog", "root_dir": ""}
    )
    assert response.status_code == 422  # Validation error
